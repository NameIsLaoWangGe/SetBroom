{
  "code": "export var lwg;\r\n(function (lwg) {\r\n    let Global;\r\n    (function (Global) {\r\n        Global._startGame = false;\r\n        Global._timeSwitch = false;\r\n        Global._gameTime = 0;\r\n        function openInterface(openName, cloesScene, func) {\r\n            Laya.Scene.load('sys/' + openName + '.json', Laya.Handler.create(this, function (scene) {\r\n                Laya.stage.addChild(scene);\r\n                switch (openName) {\r\n                    case 'UIVictory':\r\n                        console.log('本关胜利');\r\n                        break;\r\n                    case 'UIDefeated':\r\n                        console.log('本关失败');\r\n                        break;\r\n                    case 'UIStart':\r\n                        console.log('开始界面');\r\n                        break;\r\n                    case 'UIStart':\r\n                        console.log('开始界面');\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                if (cloesScene) {\r\n                    cloesScene.close();\r\n                }\r\n                if (func) {\r\n                    func();\r\n                }\r\n            }));\r\n        }\r\n        Global.openInterface = openInterface;\r\n    })(Global = lwg.Global || (lwg.Global = {}));\r\n    let Click;\r\n    (function (Click) {\r\n        function on(effect, audioUrl, target, caller, down, move, up, out) {\r\n            let btnEffect;\r\n            Click.audioUrl = audioUrl;\r\n            switch (effect) {\r\n                case 'largen':\r\n                    btnEffect = new Btn_LargenEffect();\r\n                    break;\r\n                case 'balloon':\r\n                    btnEffect = new Btn_Balloon();\r\n                    break;\r\n                case 'beetle':\r\n                    btnEffect = new Btn_Beetle();\r\n                    break;\r\n                default:\r\n                    btnEffect = new Btn_LargenEffect();\r\n                    break;\r\n            }\r\n            target.on(Laya.Event.MOUSE_DOWN, caller, down === null ? btnEffect.down : down);\r\n            target.on(Laya.Event.MOUSE_MOVE, caller, move === null ? btnEffect.move : move);\r\n            target.on(Laya.Event.MOUSE_UP, caller, up === null ? btnEffect.up : up);\r\n            target.on(Laya.Event.MOUSE_OUT, caller, out === null ? btnEffect.out : out);\r\n        }\r\n        Click.on = on;\r\n        function off(effect, target, caller, down, move, up, out) {\r\n            let btnEffect;\r\n            switch (effect) {\r\n                case 'largen':\r\n                    btnEffect = new Btn_LargenEffect();\r\n                    break;\r\n                case 'balloon':\r\n                    btnEffect = new Btn_Balloon();\r\n                    break;\r\n                case 'beetle':\r\n                    btnEffect = new Btn_Beetle();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            target.off(Laya.Event.MOUSE_DOWN, caller, down === null ? btnEffect.down : down);\r\n            target.off(Laya.Event.MOUSE_MOVE, caller, move === null ? btnEffect.move : move);\r\n            target.off(Laya.Event.MOUSE_UP, caller, up === null ? btnEffect.up : up);\r\n            target.off(Laya.Event.MOUSE_OUT, caller, out === null ? btnEffect.out : out);\r\n        }\r\n        Click.off = off;\r\n    })(Click = lwg.Click || (lwg.Click = {}));\r\n    class Btn_LargenEffect {\r\n        constructor() {\r\n        }\r\n        down(event) {\r\n            event.currentTarget.scale(1.1, 1.1);\r\n            Laya.SoundManager.playSound(Click.audioUrl, 1, Laya.Handler.create(this, function () { }));\r\n        }\r\n        up(event) {\r\n            event.currentTarget.scale(1, 1);\r\n        }\r\n        move(event) {\r\n            event.currentTarget.scale(1, 1);\r\n        }\r\n        out(event) {\r\n            event.currentTarget.scale(1, 1);\r\n        }\r\n    }\r\n    lwg.Btn_LargenEffect = Btn_LargenEffect;\r\n    class Btn_Balloon {\r\n        constructor() {\r\n        }\r\n        down(event) {\r\n            event.currentTarget.scale(Click.balloonScale + 0.06, Click.balloonScale + 0.06);\r\n            Laya.SoundManager.playSound(Click.audioUrl, 1, Laya.Handler.create(this, function () { }));\r\n        }\r\n        up(event) {\r\n            event.currentTarget.scale(Click.balloonScale, Click.balloonScale);\r\n        }\r\n        move(event) {\r\n            event.currentTarget.scale(Click.balloonScale, Click.balloonScale);\r\n        }\r\n        out(event) {\r\n            event.currentTarget.scale(Click.balloonScale, Click.balloonScale);\r\n        }\r\n    }\r\n    lwg.Btn_Balloon = Btn_Balloon;\r\n    class Btn_Beetle {\r\n        constructor() {\r\n        }\r\n        down(event) {\r\n            event.currentTarget.scale(Click.beetleScale + 0.06, Click.beetleScale + 0.06);\r\n            Laya.SoundManager.playSound(Click.audioUrl, 1, Laya.Handler.create(this, function () { }));\r\n        }\r\n        up(event) {\r\n            event.currentTarget.scale(Click.beetleScale, Click.beetleScale);\r\n        }\r\n        move(event) {\r\n            event.currentTarget.scale(Click.beetleScale, Click.beetleScale);\r\n        }\r\n        out(event) {\r\n            event.currentTarget.scale(Click.beetleScale, Click.beetleScale);\r\n        }\r\n    }\r\n    lwg.Btn_Beetle = Btn_Beetle;\r\n    let tools;\r\n    (function (tools) {\r\n        function random(n, m) {\r\n            m = m || 10;\r\n            const c = m - n + 1;\r\n            return Math.floor(Math.random() * c + n);\r\n        }\r\n        tools.random = random;\r\n        function getRandomArrayElements(arr, count) {\r\n            var shuffled = arr.slice(0), i = arr.length, min = i - count, temp, index;\r\n            while (i-- > min) {\r\n                index = Math.floor((i + 1) * Math.random());\r\n                temp = shuffled[index];\r\n                shuffled[index] = shuffled[i];\r\n                shuffled[i] = temp;\r\n            }\r\n            return shuffled.slice(min);\r\n        }\r\n        tools.getRandomArrayElements = getRandomArrayElements;\r\n        function getArrayDifElements(arr, count) {\r\n            const result = [];\r\n            let i = 0;\r\n            for (i; i < count; i++) {\r\n                const temp = getDiffEle(arr.slice(), result, i);\r\n                result.push(temp);\r\n            }\r\n            return result;\r\n        }\r\n        tools.getArrayDifElements = getArrayDifElements;\r\n        function getDiffEle(arr, result, place) {\r\n            let indexArr = [];\r\n            let i = 0;\r\n            for (i; i < arr.length - place; i++) {\r\n                indexArr.push(i);\r\n            }\r\n            const ranIndex = Math.floor(Math.random() * indexArr.length);\r\n            if (result.indexOf(arr[ranIndex]) === -1) {\r\n                const backNum = arr[ranIndex];\r\n                arr[ranIndex] = arr[indexArr.length - 1];\r\n                return backNum;\r\n            }\r\n            else {\r\n                arr.splice(ranIndex, 1);\r\n                return getDiffEle(arr, result, place);\r\n            }\r\n        }\r\n        tools.getDiffEle = getDiffEle;\r\n        tools.roleDragCan = false;\r\n        function copydata(obj) {\r\n            const ret = {};\r\n            Object.getOwnPropertyNames(obj).forEach(name => {\r\n                ret[name] = obj[name];\r\n            });\r\n            return ret;\r\n        }\r\n        tools.copydata = copydata;\r\n        function fillArray(value, len) {\r\n            var arr = [];\r\n            for (var i = 0; i < len; i++) {\r\n                arr.push(value);\r\n            }\r\n            return arr;\r\n        }\r\n        tools.fillArray = fillArray;\r\n        function speedByAngle(angle, XY) {\r\n            if (angle % 90 === 0 || !angle) {\r\n                console.error(\"计算的角度异常,需要查看：\", angle);\r\n                return;\r\n            }\r\n            let speedXY = { x: 0, y: 0 };\r\n            speedXY.y = XY.y;\r\n            speedXY.x = speedXY.y / Math.tan(angle * Math.PI / 180);\r\n            return speedXY;\r\n        }\r\n        tools.speedByAngle = speedByAngle;\r\n        function speedXYByAngle(angle, speed) {\r\n            if (angle % 90 === 0 || !angle) {\r\n            }\r\n            const speedXY = { x: 0, y: 0 };\r\n            speedXY.x = speed * Math.cos(angle * Math.PI / 180);\r\n            speedXY.y = speed * Math.sin(angle * Math.PI / 180);\r\n            return speedXY;\r\n        }\r\n        tools.speedXYByAngle = speedXYByAngle;\r\n        function speedLabelByAngle(angle, speed, speedBate) {\r\n            const speedXY = { x: 0, y: 0 };\r\n            const selfAngle = angle;\r\n            const defaultSpeed = speed;\r\n            const bate = speedBate || 1;\r\n            if (selfAngle % 90 === 0) {\r\n                if (selfAngle === 0 || selfAngle === 360) {\r\n                    speedXY.x = Math.abs(defaultSpeed) * bate;\r\n                }\r\n                else if (selfAngle === 90) {\r\n                    speedXY.y = Math.abs(defaultSpeed) * bate;\r\n                }\r\n                else if (selfAngle === 180) {\r\n                    speedXY.x = -Math.abs(defaultSpeed) * bate;\r\n                }\r\n                else {\r\n                    speedXY.y = -Math.abs(defaultSpeed) * bate;\r\n                }\r\n            }\r\n            else {\r\n                const tempXY = tools.speedXYByAngle(selfAngle, defaultSpeed);\r\n                speedXY.x = tempXY.x;\r\n                speedXY.y = tempXY.y;\r\n                if (selfAngle > 0 && selfAngle < 180) {\r\n                    speedXY.y = Math.abs(speedXY.y) * bate;\r\n                }\r\n                else {\r\n                    speedXY.y = -Math.abs(speedXY.y) * bate;\r\n                }\r\n                if (selfAngle > 90 && selfAngle < 270) {\r\n                    speedXY.x = -Math.abs(speedXY.x) * bate;\r\n                }\r\n                else {\r\n                    speedXY.x = Math.abs(speedXY.x) * bate;\r\n                }\r\n            }\r\n            return speedXY;\r\n        }\r\n        tools.speedLabelByAngle = speedLabelByAngle;\r\n        function getRad(degree) {\r\n            return degree / 180 * Math.PI;\r\n        }\r\n        tools.getRad = getRad;\r\n        function getRoundPos(angle, radius, centPos) {\r\n            var center = centPos;\r\n            var radius = radius;\r\n            var hudu = (2 * Math.PI / 360) * angle;\r\n            var X = center.x + Math.sin(hudu) * radius;\r\n            var Y = center.y - Math.cos(hudu) * radius;\r\n            return { x: X, y: Y };\r\n        }\r\n        tools.getRoundPos = getRoundPos;\r\n        function converteNum(num) {\r\n            if (typeof (num) !== \"number\") {\r\n                console.warn(\"要转化的数字并不为number\");\r\n                return num;\r\n            }\r\n            let backNum;\r\n            if (num < 1000) {\r\n                backNum = \"\" + num;\r\n            }\r\n            else if (num < 1000000) {\r\n                backNum = \"\" + (num / 1000).toFixed(1) + \"k\";\r\n            }\r\n            else if (num < 10e8) {\r\n                backNum = \"\" + (num / 1000000).toFixed(1) + \"m\";\r\n            }\r\n            else {\r\n                backNum = \"\" + num;\r\n            }\r\n            return backNum;\r\n        }\r\n        tools.converteNum = converteNum;\r\n    })(tools = lwg.tools || (lwg.tools = {}));\r\n})(lwg || (lwg = {}));\r\nexport default lwg;\r\n",
  "references": []
}
